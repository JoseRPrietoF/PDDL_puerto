
INSTRUCCIONES PARA EJECUTAR LOS PLANIFICADORES
==============================================


METRIC-FF  (para dominios STRIPS)

> ./metric_ff -o <domain.pddl> -f <problem.pddl>


http://fai.cs.uni-saarland.de/hoffmann/metric-ff.html


============================================================================================


LPG-td

> ./lpg-td-1.0 -o <domain.pddl> 
               -f <problem.pddl> 
               -n <number>    specifies the desired number of solutions
               -out <fich_solution>   ;; fichero para la solución



Si se quiere minimizar el número de timesteps hay que usar además la etiqueta -timesteps en detrimento del número de acciones.


NOTA (1):

- En LPG, cuando se usan fluents, es necesario poner una función a minimizar; en caso contrario el problema no funciona.
- En el caso de utilizar solo fluents y no durative-actions, se puede igualmente utilizar  (:metric minimize (total-time)))

NOTA (2):

- lpg_MAX_PLAN_LENGTH es una versión de LPG compilada con tamaños más grandes de arrays. Se recomienda usar esta versión, especialmente para temporal y numérico. La contraseña del archivo zip es 1234.


http://zeus.ing.unibs.it/lpg/


============================================================================================


OPTIC planner


https://sourceforge.net/projects/tsgp/   


El código se puede bajar de la página indicada (también en Poliformat)

Vamos a trabajar con optic-clp (almost-compiled binary of OPTIC for 32-bit Linux).

Bajar el fichero optic-clp.tar.bz2

El fichero está compilado pero hay que 'linkarlo' con las librerías de CLP. Asegurarse que vuestra versión de Linux contiene los paquetes indicados en la página de OPTIC.


PAQUETES: CMAKE, PERL, BISON, FLEX

PARA COMPILAR (leer el fichero README): 
1) RUN-CMAKE-RELEASE 
2) BUILD-RELEASE (si da error, entrar en el directorio y ejecutar make)


Si estáis en una máquina de 64 bits, tened en cuenta las instrucciones indicadas en la sección 'Users of 64-bit Machines'.  


Ejecución OPTIC

> ./optic-clp <domain.pddl> <problem.pddl>


OPTIC es un planficador de orden parcial. Devuelve una primera solución (determinista) y luego intenta mejorarla. Ejemplo:


; No metric specified - using makespan

; Plan found with metric 0.004
; States evaluated so far: 23
; States pruned based on pre-heuristic cost lower bound: 0
; Time 0.00
0.000: (lift hoist0 crate1 pallet0 depot0)  [0.001]
0.000: (drive truck0 distributor1 distributor0)  [0.001]
0.000: (lift hoist1 crate0 pallet1 distributor0)  [0.001]
0.001: (load hoist0 crate1 truck1 depot0)  [0.001]
0.001: (load hoist1 crate0 truck0 distributor0)  [0.001]
0.002: (drive truck1 depot0 distributor0)  [0.001]
0.002: (drive truck0 distributor0 distributor1)  [0.001]
0.003: (unload hoist2 crate0 truck0 distributor1)  [0.001]
0.003: (unload hoist1 crate1 truck1 distributor0)  [0.001]
0.004: (drop hoist2 crate0 pallet2 distributor1)  [0.001]
0.004: (drop hoist1 crate1 pallet1 distributor0)  [0.001]

 * All goal deadlines now no later than 0.004


PLAN DE 11 ACCIONES ENCONTRADO EN 4 TIME STEPS. NOTESE QUE OPTIC DEVUELVE LOS TIME STEPS COMO 0.000 0.001 PORQUE ES UN PLANIFICADOR TEMPORAL Y TIENE LA SALIDA PREPARADA PARA PLANES TEMPORALES. PARA FIJARSE EN EL NUMERO DE TIME STEPS, HAY QUE FIJARSE EN EL ÚLTIMO DIGITO DEL TIME.

A PARTIR DEL PRIMER PLAN, SE FIJA EN EL NUMERO DE TIME STEPS (4 EN ESTE CASO) E INTENTA ENCONTRAR OTRO PLAN EN MENOS DE 4 TIME STEPS.


Resorting to best-first search
Running WA* with W = 5.000, not restarting with goal states
b (9.000 | 0.000)b (8.000 | 0.001)b (7.000 | 0.002)b (5.000 | 0.002)b (4.000 | 0.002)b (3.000 | 0.003)b (2.000 | 0.003)b (1.000 | 0.004)
Problem Unsolvable
;;;; Solution Found
; States evaluated: 120430
; Cost: 0.004
; Time 53.85
0.000: (lift hoist0 crate1 pallet0 depot0)  [0.001]
0.000: (drive truck0 distributor1 distributor0)  [0.001]
0.000: (lift hoist1 crate0 pallet1 distributor0)  [0.001]
0.001: (load hoist0 crate1 truck1 depot0)  [0.001]
0.001: (load hoist1 crate0 truck0 distributor0)  [0.001]
0.002: (drive truck1 depot0 distributor0)  [0.001]
0.002: (drive truck0 distributor0 distributor1)  [0.001]
0.003: (unload hoist2 crate0 truck0 distributor1)  [0.001]
0.003: (unload hoist1 crate1 truck1 distributor0)  [0.001]
0.004: (drop hoist2 crate0 pallet2 distributor1)  [0.001]
0.004: (drop hoist1 crate1 pallet1 distributor0)  [0.001]


ACTIVA BEST-FIRST SEARCH. NO ENCUENTRA OTRA SOLUCIÓN, POR ESO DICE PROBLEM UNSOLVABLE Y DEVUELVE LA MISMA SOLUCIÓN.


=============================================================================

VAL (herramienta para validar planes clásicos)

> ./validate -v <domain.pddl> <problem.pddl> <plan_file>

https://github.com/KCL-Planning/VAL






